


                                     relax repository checkout

                              Molecular dynamics by NMR data analysis

                             Copyright (C) 2001-2006 Edward d'Auvergne
                         Copyright (C) 2006-2011 the relax development team

This is free software which you are welcome to modify and redistribute under the conditions of the
GNU General Public License (GPL).  This program, including all modules, is licensed under the GPL
and comes with absolutely no warranty.  For details type 'GPL' within the relax prompt.

Assistance in using the relax prompt and scripting interface can be accessed by typing 'help' within
the prompt.

Processor fabric:  Uni-processor.

script = 'generate_distribution.py'
----------------------------------------------------------------------------------------------------
# Script for generating the distribution of PDB structures.

# Python module imports.
from numpy import array, cross, dot, float64, zeros
from numpy.linalg import norm

# relax module imports.
from maths_fns.rotation_matrix import axis_angle_to_R


# Create a data pipe.
pipe.create('generate', 'N-state')

# The axis for the rotations (the pivot point to CoM axis).
pivot = array([ 37.254, 0.5, 16.7465])
com = array([ 26.83678091, -12.37906417,  28.34154128])
axis = pivot - com
axis = axis / norm(axis)

# Init a rotation matrix.
R = zeros((3, 3), float64)

# Tilt the rotation axis by 85 degrees.
rot_axis = cross(axis, array([0, 0, 1]))
rot_axis = rot_axis / norm(rot_axis)
axis_angle_to_R(rot_axis, 85.0 * 2.0 * pi / 360.0, R)
print("Tilt axis: %s, norm = %s" % (repr(rot_axis), norm(rot_axis)))
print("CoM-pivot axis: %s, norm = %s" % (repr(axis), norm(axis)))
axis = dot(R, axis)
print("Rotation axis: %s, norm = %s" % (repr(axis), norm(axis)))

# Load 2 copies of the original C-domain, rotating them 5 deg both ways about the rotation axis.
for i in range(2):
    # Load the PDB as a new model.
    structure.read_pdb('1J7P_1st_NH.pdb', dir='..', set_model_num=i+1)

    # The rotation angle.
    angle = (i - 0.5) * 10.0 / 360.0 * 2.0 * pi
    print("Rotation angle: %s" % angle)

    # The rotation matrix.
    axis_angle_to_R(axis, angle, R)
    print("Rotation matrix:\n%s\n" % R)

    # Rotate.
    structure.rotate(R=R, origin=pivot, model=i+1)

# Save the PDB file.
structure.write_pdb('distribution.pdb', compress_type=2, force=True)

# Create a PDB for the motional axis system.
end_pt = axis * norm(pivot - com) + pivot
structure.delete()
structure.add_atom(atom_name='C', res_name='AXE', res_num=1, pos=pivot, element='C')
structure.add_atom(atom_name='N', res_name='AXE', res_num=1, pos=end_pt, element='N')
structure.connect_atom(index1=0, index2=1)
structure.write_pdb('axis.pdb', compress_type=0, force=True)
----------------------------------------------------------------------------------------------------

relax> pipe.create(pipe_name='generate', pipe_type='N-state')
Tilt axis: array([ 0.77750136, -0.62888125,  0.        ]), norm = 1.0
CoM-pivot axis: array([ 0.51520307,  0.63695822, -0.57345447]), norm = 1.0
Rotation axis: array([ 0.40416535,  0.49967956,  0.76614014]), norm = 1.0

relax> structure.read_pdb(file='1J7P_1st_NH.pdb', dir='..', read_mol=None, set_mol_name=None, read_model=None, set_model_num=1, parser='internal')

Internal relax PDB parser.
Opening the file '../1J7P_1st_NH.pdb' for reading.
Adding molecule '1J7P_1st_NH_mol1' to model 1 (from the original molecule number 1 of model None)
Rotation angle: -0.0872664625997
Rotation matrix:
[[ 0.99681629  0.06754201 -0.04237164]
 [-0.06600502  0.9971448   0.03668209]
 [ 0.04472824 -0.03376857  0.9984283 ]]


relax> structure.rotate(R=array([[ 0.99681629,  0.06754201, -0.04237164],
       [-0.06600502,  0.9971448 ,  0.03668209],
       [ 0.04472824, -0.03376857,  0.9984283 ]]), origin=array([ 37.254 ,   0.5   ,  16.7465]), model=1)

relax> structure.read_pdb(file='1J7P_1st_NH.pdb', dir='..', read_mol=None, set_mol_name=None, read_model=None, set_model_num=2, parser='internal')

Internal relax PDB parser.
Opening the file '../1J7P_1st_NH.pdb' for reading.
Adding molecule '1J7P_1st_NH_mol1' to model 2 (from the original molecule number 1 of model None)
Rotation angle: 0.0872664625997
Rotation matrix:
[[ 0.99681629 -0.06600502  0.04472824]
 [ 0.06754201  0.9971448  -0.03376857]
 [-0.04237164  0.03668209  0.9984283 ]]


relax> structure.rotate(R=array([[ 0.99681629, -0.06600502,  0.04472824],
       [ 0.06754201,  0.9971448 , -0.03376857],
       [-0.04237164,  0.03668209,  0.9984283 ]]), origin=array([ 37.254 ,   0.5   ,  16.7465]), model=2)

relax> structure.write_pdb(file='distribution.pdb', dir=None, model_num=None, compress_type=2, force=True)
Opening the file 'distribution.pdb.gz' for writing.

Creating the PDB records

REMARK
HET
HETNAM
FORMUL

MODEL 1
ATOM, HETATM, TER
ENDMDL

MODEL 2
ATOM, HETATM, TER
ENDMDL
CONECT

MASTER
END

relax> structure.delete()
Deleting the following structural data:

Models.

Index   Model number
0       1       
1       2       


relax> structure.add_atom(atom_name='C', res_name='AXE', res_num=1, pos=array([ 37.254 ,   0.5   ,  16.7465]), element='C', atom_num=None, chain_id=None, segment_id=None, pdb_record=None)
Adding molecule 'None' to model None (from the original molecule number None of model None)

relax> structure.add_atom(atom_name='N', res_name='AXE', res_num=1, pos=array([ 45.42607668,  10.60333938,  32.23757568]), element='N', atom_num=None, chain_id=None, segment_id=None, pdb_record=None)

relax> structure.connect_atom(index1=0, index2=1)

relax> structure.write_pdb(file='axis.pdb', dir=None, model_num=None, compress_type=0, force=True)
Opening the file 'axis.pdb' for writing.

Creating the PDB records

REMARK
HET
HETNAM
FORMUL
ATOM, HETATM, TER
CONECT

MASTER
END

